// <auto-generated />
using Dotnet.Core.DataAccess.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Dotnet.Core.DataAccess.Migrations
{
    [DbContext(typeof(GenericContext))]
    [Migration("20190827080231_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Dotnet.Core.Entities.Geolocation.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("CountryId")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("CountryId")
                        .HasName("ix_cities_country_id");

                    b.HasIndex("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("cities");
                });

            modelBuilder.Entity("Dotnet.Core.Entities.Geolocation.Continental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("pk_continentals");

                    b.HasIndex("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("continentals");
                });

            modelBuilder.Entity("Dotnet.Core.Entities.Geolocation.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alpha2Code")
                        .IsRequired()
                        .HasColumnName("alpha_2_code")
                        .HasColumnType("varchar")
                        .HasMaxLength(2);

                    b.Property<string>("Alpha3Code")
                        .IsRequired()
                        .HasColumnName("alpha_3_code")
                        .HasColumnType("varchar")
                        .HasMaxLength(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("RegionId")
                        .HasColumnName("region_id");

                    b.Property<string>("UNCode")
                        .IsRequired()
                        .HasColumnName("un_code")
                        .HasColumnType("varchar(3)")
                        .HasMaxLength(3);

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.HasIndex("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RegionId")
                        .HasName("ix_countries_region_id");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("Dotnet.Core.Entities.Geolocation.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ContinentalId")
                        .HasColumnName("continental_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("pk_regions");

                    b.HasIndex("ContinentalId")
                        .HasName("ix_regions_continental_id");

                    b.HasIndex("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("regions");
                });

            modelBuilder.Entity("Dotnet.Core.Entities.Geolocation.City", b =>
                {
                    b.HasOne("Dotnet.Core.Entities.Geolocation.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_cities_countries_country_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Dotnet.Core.Entities.Geolocation.Country", b =>
                {
                    b.HasOne("Dotnet.Core.Entities.Geolocation.Region", "Region")
                        .WithMany("Countries")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("fk_countries_regions_region_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Dotnet.Core.Entities.Geolocation.Region", b =>
                {
                    b.HasOne("Dotnet.Core.Entities.Geolocation.Continental", "Continental")
                        .WithMany("Regions")
                        .HasForeignKey("ContinentalId")
                        .HasConstraintName("fk_regions_continentals_continental_id")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
